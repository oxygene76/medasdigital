syntax = "proto3";
package medasdigital.feeburner;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "medasdigital/feeburner/params.proto";
import "medasdigital/feeburner/total_burned_medas_amount.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/oxygene76/medasdigital/x/feeburner/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/medasdigital/feeburner/params";
  }

  // TotalBurnedMedasAmount queries total amount of burned medas fees.
  rpc TotalBurnedMedasAmount(QueryTotalBurnedMedasAmountRequest)
      returns (QueryTotalBurnedMedasAmountResponse) {
    option (google.api.http).get =
        "/medasdigital/feeburner/total_burned_medas_amount";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryTotalBurnedMedasAmountRequest is request type for the
// Query/QueryTotalBurnedMedasAmount method.
message QueryTotalBurnedMedasAmountRequest {}

// QueryTotalBurnedMedasAmountResponse is response type for the
// Query/QueryTotalBurnedMedasAmount method.
message QueryTotalBurnedMedasAmountResponse {
  TotalBurnedMedasAmount total_burned_medas_amount = 1
  [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3
